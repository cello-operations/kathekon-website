{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport BlogPost from '../../../components/blog/BlogPost.jsx';\nimport APIHelper from '../../../helpers/APIHelpers';\n\nconst Post = props => {\n  const router = useRouter();\n  const {\n    slug\n  } = router.query;\n\n  if (router.isFallback) {\n    return __jsx(\"div\", null, \"Loading....\");\n  }\n\n  return __jsx(BlogPost, props);\n};\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const blogPosts = await APIHelper.get('/blogs'); // testing if generating static paths will us a fallback unavailable static pages.\n\n  const posts = blogPosts.data.data.posts.splice(0, 2); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.map(post => ({\n    params: {\n      slug: post.slug\n    }\n  })); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: true\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  var _blogPost$data, _blogPost$data$data;\n\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const blogPost = await APIHelper.get(`/blogs/${params.slug}`); // Pass post data to the page via props\n\n  return {\n    props: {\n      post: blogPost === null || blogPost === void 0 ? void 0 : (_blogPost$data = blogPost.data) === null || _blogPost$data === void 0 ? void 0 : (_blogPost$data$data = _blogPost$data.data) === null || _blogPost$data$data === void 0 ? void 0 : _blogPost$data$data.post,\n      recentPosts: blogPost.data.data.recentPosts\n    },\n    revalidate: 1\n  };\n}\nexport default Post;","map":null,"metadata":{},"sourceType":"module"}