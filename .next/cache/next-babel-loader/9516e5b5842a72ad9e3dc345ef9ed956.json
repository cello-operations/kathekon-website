{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/Tolulopeodueke/Downloads/kathekon-website/pages/login.js\";\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport Cookies from \"universal-cookie\";\nimport Router from 'next/router';\nimport jwtDecode from 'jwt-decode';\nimport Login from '../components/auth/Login.jsx';\n\nvar LoginPage = function LoginPage() {\n  return __jsx(Login, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 3\n    }\n  });\n};\n\n_c = LoginPage;\n\nLoginPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var _context$req, _context$req$headers, _context$req2;\n\n    var context, cookie, requestedPathName, kathekonToken, currentTime, userInfo;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // get context from the server\n            context = (ctx === null || ctx === void 0 ? void 0 : ctx.ctx) || ctx; // extract the cookie from the request header\n\n            cookie = new Cookies(context === null || context === void 0 ? void 0 : (_context$req = context.req) === null || _context$req === void 0 ? void 0 : (_context$req$headers = _context$req.headers) === null || _context$req$headers === void 0 ? void 0 : _context$req$headers.cookie);\n            requestedPathName = context === null || context === void 0 ? void 0 : (_context$req2 = context.req) === null || _context$req2 === void 0 ? void 0 : _context$req2.url;\n            kathekonToken = cookie.get(\"kathekonToken\");\n\n            if (!kathekonToken) {\n              _context.next = 13;\n              break;\n            }\n\n            currentTime = Date.now() / 1000;\n            userInfo = jwtDecode(kathekonToken);\n\n            if (!(userInfo && userInfo.exp > currentTime)) {\n              _context.next = 13;\n              break;\n            }\n\n            if (context.res) {\n              _context.next = 11;\n              break;\n            }\n\n            // if its client side and logged in\n            Router.push('/');\n            return _context.abrupt(\"return\", {\n              kathekonToken: kathekonToken\n            });\n\n          case 11:\n            // if redered on the server and logged in, redirect user\n            context.res.writeHead(302, {\n              Location: '/'\n            });\n            return _context.abrupt(\"return\", context.res.end());\n\n          case 13:\n            return _context.abrupt(\"return\", {\n              kathekonToken: kathekonToken,\n              requestedPathName: requestedPathName\n            });\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/Users/Tolulopeodueke/Downloads/kathekon-website/pages/login.js"],"names":["React","Cookies","Router","jwtDecode","Login","LoginPage","getInitialProps","ctx","context","cookie","req","headers","requestedPathName","url","kathekonToken","get","currentTime","Date","now","userInfo","exp","res","push","writeHead","Location","end"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,8BAAlB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SAChB,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADgB;AAAA,CAAlB;;KAAMA,S;;AAKNA,SAAS,CAACC,eAAV;AAAA,sEAA4B,iBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1B;AACMC,YAAAA,OAFoB,GAEV,CAAAD,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEA,GAAL,KAAYA,GAFF,EAG1B;;AACME,YAAAA,MAJoB,GAIX,IAAIR,OAAJ,CAAYO,OAAZ,aAAYA,OAAZ,uCAAYA,OAAO,CAAEE,GAArB,yEAAY,aAAcC,OAA1B,yDAAY,qBAAuBF,MAAnC,CAJW;AAKpBG,YAAAA,iBALoB,GAKAJ,OALA,aAKAA,OALA,wCAKAA,OAAO,CAAEE,GALT,kDAKA,cAAcG,GALd;AAMpBC,YAAAA,aANoB,GAMJL,MAAM,CAACM,GAAP,CAAW,eAAX,CANI;;AAAA,iBAQtBD,aARsB;AAAA;AAAA;AAAA;;AASlBE,YAAAA,WATkB,GASJC,IAAI,CAACC,GAAL,KAAa,IATT;AAUlBC,YAAAA,QAVkB,GAUPhB,SAAS,CAACW,aAAD,CAVF;;AAAA,kBAWpBK,QAAQ,IAAIA,QAAQ,CAACC,GAAT,GAAeJ,WAXP;AAAA;AAAA;AAAA;;AAAA,gBAYjBR,OAAO,CAACa,GAZS;AAAA;AAAA;AAAA;;AAapB;AACAnB,YAAAA,MAAM,CAACoB,IAAP,CAAY,GAAZ;AAdoB,6CAeb;AAAER,cAAAA,aAAa,EAAbA;AAAF,aAfa;;AAAA;AAiBtB;AACAN,YAAAA,OAAO,CAACa,GAAR,CAAYE,SAAZ,CAAsB,GAAtB,EAA2B;AAAEC,cAAAA,QAAQ,EAAE;AAAZ,aAA3B;AAlBsB,6CAmBfhB,OAAO,CAACa,GAAR,CAAYI,GAAZ,EAnBe;;AAAA;AAAA,6CAuBnB;AAAEX,cAAAA,aAAa,EAAbA,aAAF;AAAiBF,cAAAA,iBAAiB,EAAjBA;AAAjB,aAvBmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA;;AA0BA,eAAeP,SAAf","sourcesContent":["import * as React from 'react';\nimport Cookies from \"universal-cookie\";\nimport Router from 'next/router';\nimport jwtDecode from 'jwt-decode';\nimport Login from '../components/auth/Login.jsx';\n\nconst LoginPage = () => (\n  <Login />\n);\n\n\nLoginPage.getInitialProps = async (ctx) => {\n  // get context from the server\n  const context = ctx?.ctx || ctx;\n  // extract the cookie from the request header\n  const cookie = new Cookies(context?.req?.headers?.cookie);\n  const requestedPathName = context?.req?.url;\n  const kathekonToken = cookie.get(\"kathekonToken\");\n\n  if (kathekonToken) {\n    const currentTime = Date.now() / 1000;\n    const userInfo = jwtDecode(kathekonToken);\n    if (userInfo && userInfo.exp > currentTime) {\n      if (!context.res) {\n        // if its client side and logged in\n        Router.push('/');\n        return { kathekonToken }\n      }\n      // if redered on the server and logged in, redirect user\n      context.res.writeHead(302, { Location: '/' });\n      return context.res.end();\n    }\n  }\n  // TODO: Figure out a way to determine the path the user tried to access before being redirected\n  return { kathekonToken, requestedPathName };\n};\n\nexport default LoginPage;"]},"metadata":{},"sourceType":"module"}