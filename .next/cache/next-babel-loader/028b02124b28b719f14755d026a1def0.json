{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nconst intialState = {\n  isAuthenticated: false,\n  user: {}\n};\nconst AuthContext = /*#__PURE__*/React.createContext(intialState);\nconst {\n  Provider\n} = AuthContext;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"authenticate\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isAuthenticated: true,\n        user: action.payload\n      });\n\n    case \"logout\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isAuthenticated: false,\n        user: {}\n      });\n\n    default:\n      return intialState;\n  }\n};\n\nconst AuthStateProvider = ({\n  children\n}) => {\n  const [state, dispatch] = React.useReducer(reducer, intialState);\n  return __jsx(Provider, {\n    value: {\n      state,\n      dispatch\n    }\n  }, children);\n};\n\nexport { AuthStateProvider };\nexport default AuthContext;","map":null,"metadata":{},"sourceType":"module"}