{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useContext } from \"react\";\nimport jwtDecode from \"jwt-decode\";\nimport { generalHelpers } from \"../helpers/generalHelpers\";\nimport Router from \"next/router\";\nimport Cookies from 'universal-cookie';\nimport AuthContext from '../context/AuthContext';\n\nvar useAuth = function useAuth() {\n  var currentTime = Date.now() / 1000;\n  var cookie = new Cookies();\n  var userToken = cookie.get('kathekonToken');\n\n  var _useContext = useContext(AuthContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var userDetails = userToken && jwtDecode(userToken);\n  var user = {};\n  useEffect(function () {\n    if (generalHelpers.isEmpty(userDetails)) {\n      dispatch({\n        type: \"logout\"\n      }); // redirect to login\n      // redirect && Router.replace('/login');\n    }\n\n    if (!generalHelpers.isEmpty(userDetails)) {\n      // probably set it in localstorage here\n      dispatch({\n        type: \"authenticate\",\n        payload: _objectSpread({}, userDetails)\n      });\n\n      if (userDetails && userDetails.exp < currentTime || !userDetails) {\n        dispatch({\n          type: \"logout\"\n        }); // redirect to login\n        // redirect && Router.replace('/login');\n      }\n    }\n  }, [user.exp]);\n  var isLoggedOut = userDetails && userDetails.exp < currentTime || !userDetails;\n  user.isAuthenticated = !isLoggedOut;\n  user.user = userDetails;\n  return user;\n};\n\nexport default useAuth;","map":null,"metadata":{},"sourceType":"module"}