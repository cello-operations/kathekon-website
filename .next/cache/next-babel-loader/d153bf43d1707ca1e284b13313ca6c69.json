{"ast":null,"code":"var _jsxFileName = \"/Users/Tolulopeodueke/Downloads/kathekon-website/pages/login.js\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport Cookies from \"universal-cookie\";\nimport Router from 'next/router';\nimport jwtDecode from 'jwt-decode';\nimport Login from '../components/auth/Login.jsx';\n\nconst LoginPage = () => __jsx(Login, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 3\n  }\n});\n\nLoginPage.getInitialProps = async ctx => {\n  var _context$req, _context$req$headers, _context$req2;\n\n  // get context from the server\n  const context = (ctx === null || ctx === void 0 ? void 0 : ctx.ctx) || ctx; // extract the cookie from the request header\n\n  const cookie = new Cookies(context === null || context === void 0 ? void 0 : (_context$req = context.req) === null || _context$req === void 0 ? void 0 : (_context$req$headers = _context$req.headers) === null || _context$req$headers === void 0 ? void 0 : _context$req$headers.cookie);\n  const requestedPathName = context === null || context === void 0 ? void 0 : (_context$req2 = context.req) === null || _context$req2 === void 0 ? void 0 : _context$req2.url;\n  const kathekonToken = cookie.get(\"kathekonToken\");\n\n  if (kathekonToken) {\n    const currentTime = Date.now() / 1000;\n    const userInfo = jwtDecode(kathekonToken);\n\n    if (userInfo && userInfo.exp > currentTime) {\n      if (!context.res) {\n        // if its client side and logged in\n        Router.push('/');\n        return {\n          kathekonToken\n        };\n      } // if redered on the server and logged in, redirect user\n\n\n      context.res.writeHead(302, {\n        Location: '/'\n      });\n      return context.res.end();\n    }\n  } // TODO: Figure out a way to determine the path the user tried to access before being redirected\n\n\n  return {\n    kathekonToken,\n    requestedPathName\n  };\n};\n\nexport default LoginPage;","map":{"version":3,"sources":["/Users/Tolulopeodueke/Downloads/kathekon-website/pages/login.js"],"names":["React","Cookies","Router","jwtDecode","Login","LoginPage","getInitialProps","ctx","context","cookie","req","headers","requestedPathName","url","kathekonToken","get","currentTime","Date","now","userInfo","exp","res","push","writeHead","Location","end"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,8BAAlB;;AAEA,MAAMC,SAAS,GAAG,MAChB,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF;;AAKAA,SAAS,CAACC,eAAV,GAA4B,MAAOC,GAAP,IAAe;AAAA;;AACzC;AACA,QAAMC,OAAO,GAAG,CAAAD,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEA,GAAL,KAAYA,GAA5B,CAFyC,CAGzC;;AACA,QAAME,MAAM,GAAG,IAAIR,OAAJ,CAAYO,OAAZ,aAAYA,OAAZ,uCAAYA,OAAO,CAAEE,GAArB,yEAAY,aAAcC,OAA1B,yDAAY,qBAAuBF,MAAnC,CAAf;AACA,QAAMG,iBAAiB,GAAGJ,OAAH,aAAGA,OAAH,wCAAGA,OAAO,CAAEE,GAAZ,kDAAG,cAAcG,GAAxC;AACA,QAAMC,aAAa,GAAGL,MAAM,CAACM,GAAP,CAAW,eAAX,CAAtB;;AAEA,MAAID,aAAJ,EAAmB;AACjB,UAAME,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC;AACA,UAAMC,QAAQ,GAAGhB,SAAS,CAACW,aAAD,CAA1B;;AACA,QAAIK,QAAQ,IAAIA,QAAQ,CAACC,GAAT,GAAeJ,WAA/B,EAA4C;AAC1C,UAAI,CAACR,OAAO,CAACa,GAAb,EAAkB;AAChB;AACAnB,QAAAA,MAAM,CAACoB,IAAP,CAAY,GAAZ;AACA,eAAO;AAAER,UAAAA;AAAF,SAAP;AACD,OALyC,CAM1C;;;AACAN,MAAAA,OAAO,CAACa,GAAR,CAAYE,SAAZ,CAAsB,GAAtB,EAA2B;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAA3B;AACA,aAAOhB,OAAO,CAACa,GAAR,CAAYI,GAAZ,EAAP;AACD;AACF,GArBwC,CAsBzC;;;AACA,SAAO;AAAEX,IAAAA,aAAF;AAAiBF,IAAAA;AAAjB,GAAP;AACD,CAxBD;;AA0BA,eAAeP,SAAf","sourcesContent":["import * as React from 'react';\nimport Cookies from \"universal-cookie\";\nimport Router from 'next/router';\nimport jwtDecode from 'jwt-decode';\nimport Login from '../components/auth/Login.jsx';\n\nconst LoginPage = () => (\n  <Login />\n);\n\n\nLoginPage.getInitialProps = async (ctx) => {\n  // get context from the server\n  const context = ctx?.ctx || ctx;\n  // extract the cookie from the request header\n  const cookie = new Cookies(context?.req?.headers?.cookie);\n  const requestedPathName = context?.req?.url;\n  const kathekonToken = cookie.get(\"kathekonToken\");\n\n  if (kathekonToken) {\n    const currentTime = Date.now() / 1000;\n    const userInfo = jwtDecode(kathekonToken);\n    if (userInfo && userInfo.exp > currentTime) {\n      if (!context.res) {\n        // if its client side and logged in\n        Router.push('/');\n        return { kathekonToken }\n      }\n      // if redered on the server and logged in, redirect user\n      context.res.writeHead(302, { Location: '/' });\n      return context.res.end();\n    }\n  }\n  // TODO: Figure out a way to determine the path the user tried to access before being redirected\n  return { kathekonToken, requestedPathName };\n};\n\nexport default LoginPage;"]},"metadata":{},"sourceType":"module"}