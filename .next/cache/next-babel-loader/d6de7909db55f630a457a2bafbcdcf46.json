{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport Cookies from \"universal-cookie\";\nimport Router from 'next/router';\nimport jwtDecode from 'jwt-decode';\nimport Login from '../components/auth/Login.jsx';\n\nconst LoginPage = () => __jsx(Login, null);\n\nLoginPage.getInitialProps = async ctx => {\n  var _context$req, _context$req$headers, _context$req2;\n\n  // get context from the server\n  const context = (ctx === null || ctx === void 0 ? void 0 : ctx.ctx) || ctx; // extract the cookie from the request header\n\n  const cookie = new Cookies(context === null || context === void 0 ? void 0 : (_context$req = context.req) === null || _context$req === void 0 ? void 0 : (_context$req$headers = _context$req.headers) === null || _context$req$headers === void 0 ? void 0 : _context$req$headers.cookie);\n  const requestedPathName = context === null || context === void 0 ? void 0 : (_context$req2 = context.req) === null || _context$req2 === void 0 ? void 0 : _context$req2.url;\n  const kathekonToken = cookie.get(\"kathekonToken\");\n\n  if (kathekonToken) {\n    const currentTime = Date.now() / 1000;\n    const userInfo = jwtDecode(kathekonToken);\n\n    if (userInfo && userInfo.exp > currentTime) {\n      if (!context.res) {\n        // if its client side and logged in\n        Router.push('/');\n        return {\n          kathekonToken\n        };\n      } // if redered on the server and logged in, redirect user\n\n\n      context.res.writeHead(302, {\n        Location: '/'\n      });\n      return context.res.end();\n    }\n  } // TODO: Figure out a way to determine the path the user tried to access before being redirected\n\n\n  return {\n    kathekonToken,\n    requestedPathName\n  };\n};\n\nexport default LoginPage;","map":null,"metadata":{},"sourceType":"module"}