{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport Cookies from \"universal-cookie\";\nimport Router from 'next/router';\nimport jwtDecode from 'jwt-decode';\nimport Login from '../components/auth/Login.jsx';\n\nvar LoginPage = function LoginPage() {\n  return __jsx(Login, null);\n};\n\nLoginPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var _context$req, _context$req$headers, _context$req2;\n\n    var context, cookie, requestedPathName, kathekonToken, currentTime, userInfo;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // get context from the server\n            context = (ctx === null || ctx === void 0 ? void 0 : ctx.ctx) || ctx; // extract the cookie from the request header\n\n            cookie = new Cookies(context === null || context === void 0 ? void 0 : (_context$req = context.req) === null || _context$req === void 0 ? void 0 : (_context$req$headers = _context$req.headers) === null || _context$req$headers === void 0 ? void 0 : _context$req$headers.cookie);\n            requestedPathName = context === null || context === void 0 ? void 0 : (_context$req2 = context.req) === null || _context$req2 === void 0 ? void 0 : _context$req2.url;\n            kathekonToken = cookie.get(\"kathekonToken\");\n\n            if (!kathekonToken) {\n              _context.next = 13;\n              break;\n            }\n\n            currentTime = Date.now() / 1000;\n            userInfo = jwtDecode(kathekonToken);\n\n            if (!(userInfo && userInfo.exp > currentTime)) {\n              _context.next = 13;\n              break;\n            }\n\n            if (context.res) {\n              _context.next = 11;\n              break;\n            }\n\n            // if its client side and logged in\n            Router.push('/');\n            return _context.abrupt(\"return\", {\n              kathekonToken: kathekonToken\n            });\n\n          case 11:\n            // if redered on the server and logged in, redirect user\n            context.res.writeHead(302, {\n              Location: '/'\n            });\n            return _context.abrupt(\"return\", context.res.end());\n\n          case 13:\n            return _context.abrupt(\"return\", {\n              kathekonToken: kathekonToken,\n              requestedPathName: requestedPathName\n            });\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default LoginPage;","map":null,"metadata":{},"sourceType":"module"}