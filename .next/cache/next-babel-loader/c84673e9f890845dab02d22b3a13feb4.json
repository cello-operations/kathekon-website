{"ast":null,"code":"var __jsx = React.createElement;\nimport _styled from \"styled-components\";\nimport React from \"react\";\n\n/* framer-motion and useInView here are used to animate the sections in when we reach them in the viewport\n */\nimport { motion } from \"framer-motion\";\nimport useInView from '../hooks/useInView';\n\nconst StyledDiv = _styled.div.withConfig({\n  displayName: \"AnimationRevealPage__StyledDiv\",\n  componentId: \"sc-14v83ae-0\"\n})({\n  \"minHeight\": \"100vh\",\n  \"--text-opacity\": \"1\",\n  \"color\": \"rgba(36, 62, 99, var(--text-opacity))\",\n  \"padding\": \"2rem\",\n  \"overflow\": \"hidden\"\n});\n\nfunction AnimationReveal({\n  disabled,\n  children\n}) {\n  if (disabled) {\n    return __jsx(React.Fragment, null, children);\n  }\n\n  if (!Array.isArray(children)) children = [children];\n  const directions = [\"left\", \"right\"];\n  const childrenWithAnimation = children.map((child, i) => {\n    return __jsx(AnimatedSlideInComponent, {\n      key: i,\n      direction: directions[i % directions.length]\n    }, child);\n  });\n  return __jsx(React.Fragment, null, childrenWithAnimation);\n}\n\nfunction AnimatedSlideInComponent({\n  direction = \"left\",\n  offset = 30,\n  children\n}) {\n  const [ref, inView] = useInView(30);\n  const x = {\n    target: \"0%\"\n  };\n  if (direction === \"left\") x.initial = \"-150%\";else x.initial = \"150%\";\n  return __jsx(motion.section, {\n    initial: {\n      x: x.initial\n    },\n    animate: {\n      x: inView && x.target,\n      transitionEnd: {\n        x: inView && 0\n      }\n    },\n    transition: {\n      type: \"spring\",\n      damping: 100,\n      duration: 1\n    },\n    ref: ref\n  }, children);\n}\n\nconst AnimationRevealPage = props => __jsx(StyledDiv, {\n  className: \"App\"\n}, __jsx(AnimationReveal, props));\n\nexport default AnimationRevealPage;","map":null,"metadata":{},"sourceType":"module"}